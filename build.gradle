buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("au.com.dius:pact-jvm-provider-gradle_2.12:3.6.1")
    }
}

apply plugin: 'java'
apply plugin: 'au.com.dius.pact'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.learn.pact'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'au.com.dius:pact-jvm-provider_2.12:3.6.1'
    testImplementation 'au.com.dius:pact-jvm-consumer-junit_2.12:3.6.1'
    testImplementation 'au.com.dius:pact-jvm-provider-junit_2.12:3.6.1'
}

test {
    systemProperty 'pact.verifier.publishResults', "true"
    systemProperty 'pact.provider.version', getDate()
}

pact {
    serviceProviders {
        "inventory" {
            hasPactsFromPactBroker('http://localhost:80/')
        }
    }

    reports {
        defaultReports() // adds the standard console output

        markdown // report in markdown format
        json // report in json format
    }
}

def getDate() {
    return new Date().format('MM-dd-yyyy HH:mm:ss')
}